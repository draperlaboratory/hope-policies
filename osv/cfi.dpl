/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved.
 *
 * Use and disclosure subject to the following license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.cfi:

/* Very basic control flow policy.
 * Jumps, branches and returns must land on an instruction (code = Target) with
 * (env = Jumping) to be valid control flow transfers. Some sections of the code
 * may be marked NoCFI to be exempt from control flow checking.
 */

import:
    osv.riscv

metadata:
  Target,
  Jumping,
  NoCFI

policy:
    cfiPol =

      // special case: allow return to C from asm interrupt handling
      mretGrp ( env == _ -> env = {} )

      // Case for not checking cfi (asm code)
    ^ allGrp    (code == {NoCFI}, env == {} -> env = env )

      // Base case for a jump or branch
    ^ branchGrp (code == {}, env == {}, op1 == _, op2 == _ -> env = {Jumping})
    ^ jumpRegGrp(code == {}, env == {}, target == _ -> return = {}, env = {Jumping})
    ^ jumpGrp   (code == {}, env == {} -> return = {}, env = {Jumping})

      // Cases for when a jump/branch lands on another control flow
    ^ branchGrp (code == {Target}, env == {Jumping} -> env = {Jumping})
    ^ jumpGrp   (code == {Target}, env == {Jumping} -> env = {Jumping}, return = {})

      // Case for landing on a target
    ^ allGrp    (code == {Target}, env == {Jumping} -> env = {})

      // Case for normal execution
    ^ allGrp    (code == _, env == {} -> env = env)
    ^ allGrp (-> fail "cfi: Illegal control flow detected")

require:
    init ISA.RISCV.Reg.Env                          {}
    init ISA.RISCV.Reg.Default                      {}
    init ISA.RISCV.CSR.Default                      {}

    // While this policy doesn't make use of llvm.CFI_*-Instr, explicitly
    // setting them ensures that the llvm.NoCFI tag is consistent.
    init llvm.CFI_Call-Tgt                          {Target}
    init llvm.CFI_Branch-Tgt                        {Target}
    init llvm.CFI_Return-Tgt                        {Target}
    init llvm.CFI_Call-Instr                        {NoCFI}
    init llvm.CFI_Branch-Instr                      {NoCFI}
    init llvm.CFI_Return-Instr                      {NoCFI}
    init llvm.NoCFI                                 {NoCFI}

    init SOC.MMIO.UART_0                            {}
    init SOC.MEMORY.FLASH_0                         {}
    init SOC.MEMORY.RAM_0                           {}

    init SOC.MMIO.MROM                              {}
    init SOC.MMIO.TEST                              {}
    init SOC.MMIO.CLINT                             {}
    init SOC.MMIO.ITIM                              {}
    init SOC.MMIO.PLIC                              {}
    init SOC.CBUS.PLIC                              {}
    init SOC.PBUS.MAILBOX                           {}

    init elf.Section.SHF_ALLOC                      {}
    init elf.Section.SHF_EXECINSTR                  {}
    init elf.Section.SHF_WRITE                      {}

