/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved. 
 *
 * Use and disclosure subject to the following license. 
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.cfi:

/* Very basic control flow policy.
 * Jumps, branches and returns must land on an instruction (code = Target) with
 * (env = Jumping) to be valid control flow transfers. Some sections of the code
 * may be marked NoCFI to be exempt from control flow checking.
 */

import:
    osv.riscv

metadata:
  Target,
  None,
  Jumping,
  NoCFI

policy:
    cfiPol =

    // special case: allow return to C from asm interrupt handling
    mretGrp ( env == _ -> env = {} )

     // Case for not checking cfi (asm code)
    ^ allGrp    (code == [+NoCFI,-Target], env == _ -> env = env )
         // cases for landing on a jump (bounce)
    ^ branchGrp (code == [Target], env == [Jumping] -> env = {Jumping})
    ^ jumpGrp   (code == [Target], env == [Jumping] -> env = {Jumping}, return = {})
        // cases for a jump to target
    ^ branchGrp (code == [-Target], env == [-Jumping], op1 == _, op2 == _ -> env = env[Jumping])
    ^ jumpRegGrp   (code == [-Target], env == [-Jumping], target == _ -> return = {}, env = env[Jumping])
    ^ jumpGrp   (code == [-Target], env == [-Jumping] -> return = {}, env = env[Jumping])
        // Case for landing on a target
    ^ allGrp    (code == [+Target], env == [+Jumping] -> env = env[-Jumping])
       // Case for normal execution
    ^ allGrp    (env == [-Jumping] -> env = env)
    ^ allGrp (-> fail "cfi: Illegal control flow detected")

    main = cfiPol

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    init llvm.CFI_Call-Tgt                   {Target}
    init llvm.CFI_Branch-Tgt                 {Target}
    init llvm.CFI_Return-Tgt                 {Target}
    init llvm.CFI_Call-Instr                 {NoCFI}
    init llvm.CFI_Branch-Instr               {NoCFI}
    init llvm.CFI_Return-Instr               {NoCFI}
    init llvm.NoCFI                          {NoCFI}
    
    init dover.Kernel.MemoryMap.Default       {}
    init dover.riscv.Mach.PC                           {}
    init dover.riscv.User.PC                           {}
    init dover.riscv.Mach.Reg                          {}
    init dover.riscv.User.Reg                          {}
    init dover.riscv.Mach.RegZero                      {}
    init dover.riscv.User.RegZero                      {}
    init dover.Kernel.MemoryMap.UserStack     {}
    init dover.Kernel.MemoryMap.UserHeap      {}
    init dover.SOC.IO.UART                             {None}
    init dover.SOC.IO.Flash                            {}
    init dover.SOC.CSR.Default                         {}
    init dover.SOC.CSR.MTVec                           {}
    init dover.Kernel.Code.ElfSection.SHF_WRITE     {}
    init dover.Kernel.Code.ElfSection.SHF_ALLOC     {}
    init dover.Kernel.Code.ElfSection.SHF_EXECINSTR {}

    init SOC.IO.UART_0                       {}
    init SOC.Memory.Flash_0                  {}
    init SOC.Memory.Ram_0                    {}

    init SOC.IO.Debug                        {}
    init SOC.IO.TEST                         {}
    init SOC.IO.CLINT                        {}
    init SOC.IO.ITIM                         {}
    init SOC.IO.PLIC                         {}

	init elf.Section.SHF_ALLOC               {}
	init elf.Section.SHF_EXECINSTR           {}
	init elf.Section.SHF_WRITE               {}
