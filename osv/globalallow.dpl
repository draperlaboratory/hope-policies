/*
 * Copyright Â© 2017-2019 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved. 
 *
 * Use and disclosure subject to the following license. 
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.globalallow:

/* Allow everything
 * 
 * This is a terrible policy, but a trivial test.
 */

import:
      osv.riscv

policy:
  global globalallowPol = allGrp (code == _, env == _ -> env = env)

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}
    
    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.MMIO.UART_0                       {}
    init SOC.MEMORY.FLASH_0                  {}
    init SOC.MEMORY.RAM_0                    {}

    init SOC.MMIO.TEST                         {}
    init SOC.MMIO.CLINT                        {}
    init SOC.MMIO.ITIM                         {}
    init SOC.MMIO.PLIC                         {}
    init SOC.CBUS.PLIC                         {}
    init SOC.MMIO.GEM0                         {}

    init elf.Section.SHF_ALLOC         {}
    init elf.Section.SHF_EXECINSTR     {}
    init elf.Section.SHF_WRITE         {}

