/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved.
 *
 * Use and disclosure subject to the following license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.threeClass:

/* Calls can only target the beginning of functions, tagged "Call"
 * Branches can only target insturctions tagged "Branch" -- note this overkill and adds
 *    no security barring some novel attack.  But hey, its free.
 * Returns can only target the instruction after a call, i.e., valid return targets
 */

import:
    osv.riscv

metadata:
  //3 cfi classes: targets
  Call-Tgt,
  Return-Tgt,
  Branch-Tgt,

  //3 cfi classes: instr that sets state, state checked at target
  Call-Instr,
  Return-Instr,
  Branch-Instr,

	//State for the 3 cfi classes
  Jumping-Call,
  Jumping-Return,
  Jumping-Branch,

  //get out of jail free
  NoCFI,
  Jumping-NoCFI,
  None

policy:
    threeClassPol = riscvPol
         // Case for not checking cfi (asm code)
    ^ allGrp    (code == [+NoCFI], env == _ -> env = {Jumping-NoCFI})

         // cases for landing on a jump (bounce)
    ^ controlFlowGrp  (code == [Branch-Tgt, Branch-Instr], env == [Jumping-Branch] -> env = {Jumping-Branch})
    ^ controlFlowGrp  (code == [Return-Tgt, Branch-Instr], env == [Jumping-Return] -> env = {Jumping-Branch})
    ^ controlFlowGrp  (code == [Call-Tgt, Branch-Instr], env == [Jumping-Call] -> env = {Jumping-Branch})

    ^ controlFlowGrp  (code == [Branch-Tgt, Return-Instr], env == [Jumping-Branch] -> env = {Jumping-Return})
    ^ controlFlowGrp  (code == [Return-Tgt, Return-Instr], env == [Jumping-Return] -> env = {Jumping-Return})
    ^ controlFlowGrp  (code == [Call-Tgt, Return-Instr], env == [Jumping-Call] -> env = {Jumping-Return})

    ^ controlFlowGrp  (code == [Branch-Tgt, Call-Instr], env == [Jumping-Branch] -> env = {Jumping-Call})
    ^ controlFlowGrp  (code == [Return-Tgt, Call-Instr], env == [Jumping-Return] -> env = {Jumping-Call})
    ^ controlFlowGrp  (code == [Call-Tgt, Call-Instr], env == [Jumping-Call] -> env = {Jumping-Call})

         // cases for a jump to target
    ^ controlFlowGrp  (code == [Branch-Instr, -Branch-Tgt, -Call-Tgt, -Return-Tgt], env == [-Jumping-Branch] -> env = {Jumping-Branch})
    ^ controlFlowGrp  (code == [Return-Instr, -Branch-Tgt, -Call-Tgt, -Return-Tgt], env == [-Jumping-Return] -> env = {Jumping-Return})
    ^ controlFlowGrp  (code == [Call-Instr, -Branch-Tgt, -Call-Tgt, -Return-Tgt], env == [-Jumping-Call] -> env = {Jumping-Call})

         // Case for landing on a target -- has to be allGrp
    ^ allGrp    (code == [Call-Tgt], env == [+Jumping-Call] -> env = env[-Jumping-Call])
    ^ allGrp    (code == [Call-Tgt], env == [+Jumping-NoCFI] -> env = env[-Jumping-NoCFI])
    ^ allGrp    (code == [Return-Tgt], env == [+Jumping-Return] -> env = env[-Jumping-Return])
    ^ allGrp    (code == [Branch-Tgt], env == [+Jumping-Branch] -> env = env[-Jumping-Branch])

         // Case for normal execution
    ^ allGrp    (env == [-Jumping-Branch, -Jumping-Return, -Jumping-Call] -> env = env)
    ^ allGrp (-> fail "Illegal control flow detected")

    //main = threeClassPol

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    /* TODO - this needs to be adjusted for my new tags somehow */
    init llvm.CFI_Call-Tgt                   {Call-Tgt}
    init llvm.CFI_Branch-Tgt                 {Branch-Tgt}
    init llvm.CFI_Return-Tgt                 {Return-Tgt}
    init llvm.CFI_Call-Instr                 {Call-Instr}
    init llvm.CFI_Branch-Instr               {Branch-Instr}
    init llvm.CFI_Return-Instr               {Return-Instr}
    init llvm.NoCFI                          {NoCFI}

    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.MMIO.UART_0                       {}
    init SOC.MEMORY.FLASH_0                  {}
    init SOC.MEMORY.RAM_0                    {}

    init SOC.MMIO.TEST                         {}
    init SOC.MMIO.CLINT                        {}
    init SOC.MMIO.ITIM                         {}
    init SOC.MMIO.PLIC                         {}
    init SOC.CBUS.PLIC                         {}

    init Tools.Elf.Section.SHF_ALLOC         {}
    init Tools.Elf.Section.SHF_EXECINSTR     {}
    init Tools.Elf.Section.SHF_WRITE         {}

	init elf.Section.SHF_ALLOC               {}
	init elf.Section.SHF_EXECINSTR           {}
	init elf.Section.SHF_WRITE               {}
