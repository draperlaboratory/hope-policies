/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved. 
 *
 * Use and disclosure subject to the following license. 
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
module osv.ppac:

/* Privileges, Permissions, and Access Control (PPAC) policy
 * - Enforces read/write permissions between doctors, patients, and admins
 * - Patients may read their own records but may not write to them
 * or read other patients' records
 * - Doctors may read or write to any patient's record
 * - Admins have the same privileges as doctors
 */

import:
  osv.riscv
  osv.userType
  osv.heap


metadata:
  Return-Instr,

  // Access control levels / user types
  Patient,
  Doctor,
  Admin,

  // Code tags for user type initialization
  SetPatient,
  SetDoctor,
  SetAdmin,

  // Memory tag for the current type of active user
  ActiveUser,
  
  // Memory tag for the patient data accessible to the active user
  ActivePatient,

  // Code tag for clearing the active user
  ClearActive,

  // Memory tag for patient data
  PatientData Color,

  // Colored tag for pointer to patient data
  PatientPointer Color


policy:
  ppacPol =

    // Explicit failure for writing to Patient data without Doctor/Admin privileges
    storeGrp(mem == [+(PatientData _)], code == [-SetPatient], env == [-Doctor, -Admin]
             -> fail "Invalid user writing to patient data")
 
    // Patient data read must match active patient color
    // NOTE: the first rule only matches if the two colors are equal
    // Otherwise, the second rule matches and the policy fails
    ^ loadGrp(mem == [+(PatientData color)], env == [+(PatientPointer color), -Doctor, -Admin]
              -> env = env, res = mem)
    ^ loadGrp(mem == [+(PatientData color1)], env == [+(PatientPointer color2), -Doctor, -Admin]
              -> fail "Active patient attempting to read data from an inactive patient")

    // Apply and remove tags on patient memory
    ^ storeGrp(code == [+ApplyColor], addr == [+(Pointer color)], val == [ModColor], env == [+SetPatient]
               -> mem = {(PatientData color)}, env = env)
    ^ storeGrp(code == [+RemoveColor], mem == [+(PatientData _)], val == [ModColor]
               -> mem = mem[-(PatientData _)], env = env)
    
    // Color the pointer to user's patient data when assigned as patient
    ^ storeGrp(code == [+SetPatient], addr == [+(Pointer _)], val == [+(Pointer color)]
               -> mem = {(PatientPointer color)})
   	^ loadGrp(mem == [+(PatientPointer color)], addr == _, env == _ -> env = env, res = mem) 

    // Tag patient memory, relying on User Type policy

    // Apply SetPatient to PC to track call site inside Assignment code
    ^ allGrp(code == [+SetPatient,+Return-Instr], env == [+SetPatient] -> env = env[-SetPatient])
    ^ allGrp(code == [+SetPatient], env == [-SetPatient] -> env = env[+SetPatient])
    // Mark memory as Patient
    ^ storeGrp(code == [+Assignment], env == [+SetPatient] -> mem = {Patient}, env = env)
    // Propogate Patient tag
   	^ loadGrp(mem == [+Patient], addr == _, env == _ -> env = env, res = mem) 

    // Same for doctor
    ^ allGrp(code == [+SetDoctor,+Return-Instr], env == [+SetDoctor] -> env = env[-SetDoctor])
    ^ allGrp(code == [+SetDoctor], env == [-SetDoctor] -> env = env[+SetDoctor])
    ^ storeGrp(code == [+Assignment], env == [+SetDoctor] -> mem = {Doctor}, env = env)
    ^ loadGrp(mem == [+Doctor], addr == _, env == _ -> env = env, res = mem)

    // Same for admin
    ^ allGrp(code == [+SetAdmin,+Return-Instr], env == [+SetAdmin] -> env = env[-SetAdmin])
    ^ allGrp(code == [+SetAdmin], env == [-SetAdmin] -> env = env[+SetAdmin])
    ^ storeGrp(code == [+Assignment], env == [+SetAdmin] -> mem = {Admin}, env = env)
    ^ loadGrp(mem == [+Admin], addr == _, env == _ -> env = env, res = mem)

    // Set the current permission in env when new user authenticated
    ^ storeGrp(mem == [+ActiveUser], val == [+Patient] -> env = env[+Patient], mem = mem)
    ^ storeGrp(mem == [+ActiveUser], val == [+Doctor] -> env = env[+Doctor], mem = mem)
    ^ storeGrp(mem == [+ActiveUser], val == [+Admin] -> env = env[+Admin], mem = mem)

    // Set the patient object currently accessible to the active user
    ^ storeGrp(mem == [+ActivePatient], val == [+(PatientPointer color)]
               -> env = env[+(PatientPointer color)])

    // Default: keep memory tags on store
    ^ storeGrp(mem == [+ActiveUser], val == _ -> env = env, mem = mem) 
    ^ storeGrp(mem == [+ActivePatient], val == _ -> env = env, mem = mem) 
    ^ storeGrp(mem == [+PatientData], addr == _, val == _, env == _ -> env = env, mem = mem)

    // Clear PC tags when clearing the active user
    ^ allGrp(code == [+ClearActive] -> env = {})

    // All else allowed
    ^ branchGrp(code == _, env == _, op1 == _, op2 == _ -> env = env )
    ^ jumpRegGrp(code == _, env == _, target == _ -> env = env , return = {})
    ^ jumpGrp(code == _, env == _ -> return = {}, env = env)
    ^ loadUpperGrp(code == _, env == _ -> env = env, dest = {})
    ^ immArithGrp(code == _, env == _, op1 == _ -> env = env, res = {})
    ^ arithGrp(code == _, env == _, op1 == _, op2 == _ -> env = env, res = {})
    ^ loadGrp(code == _, env == _, addr == _, mem == _ -> env = env, res = {})
    ^ storeGrp(code == _, env == _, addr == _, val == _, mem == _ -> env = env, mem = {})
    ^ mulDivRemGrp(code == _, env == _, op1 == _, op2 == _ -> env = env, res = {})
    ^ csrGrp(code == _, env == _, op1 == _, csr == _ -> env = env, csr = {}, res = {})
    ^ csriGrp(code == _, env == _, csr == _ -> env = env, csr = {}, res = {})
    ^ privGrp(code == _, env == _ -> env = env)
    ^ systemGrp(code == _, env == _ -> env = env)
    ^ floatGrp(code == _, env == _ -> env = env)
    ^ atomicGrp(code == _, env == _ -> env = env)


require:
  init ISA.RISCV.Reg.Env                   {}
  init ISA.RISCV.Reg.Default               {}
  init ISA.RISCV.Reg.RZero                 {}
  init ISA.RISCV.CSR.Default               {}
  init ISA.RISCV.CSR.MTVec                 {}

  init Tools.Elf.Section.SHF_ALLOC         {}
  init Tools.Elf.Section.SHF_EXECINSTR     {}
  init Tools.Elf.Section.SHF_WRITE         {}

  init llvm.CFI_Return-Instr               {Return-Instr}

  init webapp.ppac.p_init                  {SetPatient}
  init webapp.ppac.d_init                  {SetDoctor}
  init webapp.ppac.a_init                  {SetAdmin}

  init webapp.ppac.active                  {ActiveUser}
  init webapp.ppac.active_patient          {ActivePatient}
  init webapp.ppac.clear_active            {ClearActive}
