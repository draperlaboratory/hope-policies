module osv.testContext:

import:
      osv.riscv

metadata:
      procA,
      procB,
      codeProcA,
      codeProcB

policy:

    testContextPol= riscvPol
            ^ allGrp(code == [+codeProcA], env == [-procB] -> env = env[+procA])
            ^ allGrp(code == [+codeProcB], env == [-procA] -> env = env[+procB])
            ^ allGrp(code == [+codeProcA], env == _ -> fail "procB PC tag carried over")
            ^ allGrp(code == [+codeProcB], env == _ -> fail "procA PC tag carried over")
            ^ allGrp(code == _, env == _ -> env = env)

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.IO.UART_0                       {}
    init SOC.Memory.Flash_0                  {}
    init SOC.Memory.Ram_0                    {}
    init dover.Kernel.MemoryMap.Default       {}
    init dover.riscv.Mach.PC                           {}
    init dover.riscv.User.PC                           {}
    init dover.riscv.Mach.Reg                          {}
    init dover.riscv.User.Reg                          {}
    init dover.riscv.Mach.RegZero                      {}
    init dover.riscv.User.RegZero                      {}

    init SOC.IO.TEST                         {}

    init Tools.Elf.Section.SHF_ALLOC         {}
    init Tools.Elf.Section.SHF_EXECINSTR     {}
    init Tools.Elf.Section.SHF_WRITE         {}

    init testContext.mainProcA              {codeProcA}
    init testContext.mainProcB              {codeProcB}

    init SOC.IO.TEST                         {}
    init SOC.IO.CLINT                        {}
    init SOC.IO.ITIM                         {}
    init SOC.IO.PLIC                         {}
