/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved.
 *
 * Use and disclosure subject to the following license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.rwx:

/* Read, Write, Execute policy.
 * Provides basic memory access protections:
 *  Load from memory must have Rd tag
 *  Store to memory must have Wr tag
 *  Instructions must have Ex tag to be run
 */

import:
      osv.riscv

metadata:
        Rd,
        Wr,
        Ex

policy:
  rwxPol =
      loadGrp(mem == [-Rd] -> fail "read violation")
    ^ storeGrp(mem == [-Wr] -> fail "write violation")
    ^ allGrp(code == [-Ex] -> fail "execute violation")

    ^ loadGrp  (code == [+Ex], env == {}, mem == [+Rd], addr == {} -> res = {}, env = env)
    ^ storeGrp (code == [+Ex], env == {}, mem == [+Wr] -> mem = mem, env = env)
    ^ allGrp(code == [+Ex], env == {} -> env = env)

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.CSR.Default               {Rd}

    init SOC.MMIO.MROM                       {Rd, Wr}
    init SOC.MMIO.UART_0                     {Rd, Wr}
    init SOC.MMIO.UART_1                     {Rd, Wr}
    init SOC.MEMORY.FLASH_0                  {Rd}
    init SOC.MEMORY.RAM_0                    {Rd, Wr}
    init SOC.Memory.Code_1                   {Rd, Wr}
    init SOC.Memory.Code_2                   {Rd, Wr}
    init SOC.Memory.Code_3                   {Rd, Wr}
    init SOC.Memory.Code_4                   {Rd, Wr}

    init SOC.MMIO.TEST                       {Rd, Wr}
    init SOC.MMIO.CLINT                      {Rd, Wr}
    init SOC.MMIO.ITIM                       {Rd, Wr, Ex}
    init SOC.MMIO.PLIC                       {Rd, Wr}
    init SOC.CBUS.PLIC                       {Rd, Wr}
    init SOC.MMIO.GEM0                       {Rd, Wr}
    init SOC.MMIO.I2C_0                      {Rd, Wr}
    init SOC.MMIO.GPIO_0                     {Rd, Wr}
    init SOC.MMIO.GPIO_1                     {Rd, Wr}
    init SOC.MMIO.Ethernet_0                 {Rd, Wr}
    init SOC.PBUS.MAILBOX                    {Rd, Wr}

    init SOC.Memory.BRAM_CTRL_0              {Rd, Wr}
    init SOC.Memory.DMA_0                    {Rd, Wr}
    init SOC.Memory.QSPI_1                   {Rd}

    init elf.Section.SHF_ALLOC               {Rd}
    init elf.Section.SHF_EXECINSTR           {Ex}
    init elf.Section.SHF_WRITE               {Rd, Wr}

