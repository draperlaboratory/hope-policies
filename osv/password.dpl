module osv.password:

import:
      osv.riscv

metadata:
      Password
      Public

policy:
        // a policy that allows anything and contributes no results
    passwordPol =
    
            // explicit failure for writing password out
	    storeGrp( mem == [+Public], addr == _, val == [+Password], env == _
              -> fail "Password tried to escape server" )

   	    // public memory is always public
   	    ^ storeGrp(   mem == [+Public], addr == _, val == _, env == _ -> env = env, mem = mem)

	    // set password protection
   	    ^ storeGrp(mem == _, addr == _, val == [+Password], env == _ -> env = env, mem = val)

	    // Propogate password protection
	    ^ arithGrp(env == _, op1 == [+Password], op2 == _ -> env = env, res = op1)
   	    ^ arithGrp(env == _, op1 == _, op2 == [+Password] -> env = env, res = op2)
   	    ^ mulDivRemGrp(code == _, env == _, op1 == [+Password], op2 == _ -> env = env, res = op1)
   	    ^ mulDivRemGrp(code == _, env == _, op1 == _, op2 == [+Password] -> env = env, res = op2)
   	    ^ immArithGrp(env == _, op1 == [+Password] -> env = env, res = op1)
   	    ^ loadGrp(mem == [+Password], addr == _, env == _ -> env = env, res = mem )
   	    ^ storeGrp(mem == [+Password], addr == _, val == _, env == _ -> env = env, mem = mem ) 

    	    // all else OK
    	    ^ branchGrp(code == _, env == _, op1 == _, op2 == _ -> env = env )
            ^ jumpRegGrp(code == _, env == _, target == _ -> env = env , return = {})
            ^ jumpGrp(code == _, env == _ -> return = {})
            ^ loadUpperGrp(code == _, env == _ -> env = env, dest = {})
            ^ immArithGrp(code == _, env == _, op1 == _ -> env = env, res = {})
            ^ arithGrp(code == _, env == _, op1 == _, op2 == _ -> env = env, res = {})
            ^ loadGrp(code == _, env == _, addr == _, mem == _ -> env = env, res = {})
            ^ storeGrp(code == _, env == _, addr == _, val == _, mem == _ -> env = env, mem = {})
            ^ mulDivRemGrp(code == _, env == _, op1 == _, op2 == _ -> env = env, res = {})
            ^ csrGrp(code == _, env == _, op1 == _, csr == _ -> env = env, csr = {}, res = {})
            ^ csriGrp(code == _, env == _, csr == _ -> env = env, csr = {}, res = {})
            ^ privGrp(code == _, env == _ -> env = env)
            ^ systemGrp(code == _, env == _ -> env = env)
            ^ floatGrp(code == _, env == _ -> env = env)
            ^ atomicGrp(code == _, env == _ -> env = env)

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.IO.UART_0                       {Public}
    init SOC.Memory.Flash_0                  {}
    init SOC.Memory.Ram_0                    {}

    init SOC.IO.TEST                         {}

    init Tools.Elf.Section.SHF_ALLOC         {}
    init Tools.Elf.Section.SHF_EXECINSTR     {}
    init Tools.Elf.Section.SHF_WRITE         {}

    init webapp.var.pw_byte                  {Password}