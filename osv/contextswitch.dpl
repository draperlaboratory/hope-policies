/*
 * Copyright Â© 2017-2019 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved. 
 *
 * Use and disclosure subject to the following license. 
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.contextswitch:

/* Maintain tags when context is switched.
 */

import:
      osv.riscv


type:
    data SavedTags = TagSet

metadata:
      Saved SavedTags,
      SavedPC SavedTags,
      CSLoad,
      CSSave

policy:
  global contextswitchPol =
        storeMemGrp(code == [+CSSave], env == {}, addr == _, val == _, mem == _ -> env = env, mem = mem[+(Saved val)])
      ^ storeMemGrp(code == [+CSSave], env == _, addr == _, val == _, mem == _ -> env = {}, mem = mem[+(Saved val),+(SavedPC env)])
      ^ loadMemGrp (code == [+CSLoad], env == _, addr == _, mem == [+(Saved regTags),+(SavedPC envTag)] -> env = envTag, res = regTags)
      ^ loadMemGrp (code == [+CSLoad], env == _, addr == _, mem == [+(Saved regTags)] -> env = env, res = regTags)

group:
    grp loadMemGrp(RS1:addr, MEM:mem -> RD:res)
        lw
        ld
    grp storeMemGrp(RS1:addr, RS2:val, MEM:mem -> MEM:mem)
        sw
        sd

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.IO.UART_0                       {}
    init SOC.Memory.Flash_0                  {}
    init SOC.Memory.Ram_0                    {}

    init SOC.IO.Debug                        {}
    init SOC.IO.TEST                         {}
    init SOC.IO.CLINT                        {}
    init SOC.IO.ITIM                         {}
    init SOC.IO.PLIC                         {}
    init SOC.IO.GEM0                         {}

    init elf.Section.SHF_ALLOC         {}
    init elf.Section.SHF_EXECINSTR     {}
    init elf.Section.SHF_WRITE         {}

    init contextswitch.save {CSSave}
    init contextswitch.load {CSLoad}

