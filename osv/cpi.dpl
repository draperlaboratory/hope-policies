/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved. 
 *
 * Use and disclosure subject to the following license. 
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.cpi:

/* Function pointers written to memory are tagged.  A write of any other value
 * to that location destroys the tag.  Loads of memory preserve the function pointer 
 * tag.  Indirect calls must use a register with the function pointer tag, meaning
 * that it came from an intended fptr write and hasn't been overwritten since.
 * This is effectively CPI in HW, and should be a precise, performant version of 
 * control flow protection.  
 */

import:
    osv.riscv

metadata:
  FPtrStore,
  FPtrCreate,
  FPtrMem,
  Return-Instr

policy:
    cpiPol =
       //When to set FPtr -- always allow jumps through registers set by auipc. this is a must for compatability with
       //handwrite asm.  
       pcGrp ( -> dest = {FPtrMem})
     ^ addiGrp (code == [+FPtrCreate] -> dest = {FPtrMem}) 
     ^ storeGrp (code == [+FPtrStore], val == [+FPtrMem], mem == _ -> mem = mem[+FPtrMem])
     ^ loadGrp (mem == [+FPtrMem]  -> res = {FPtrMem})
     
       //When to clear FPtr
     ^ storeGrp (code == [-FPtrCreate], mem == _ -> mem = mem[-FPtrMem])
     ^ loadGrp (mem == [-FPtrMem] -> res = {})

       //Enforcement -- get out of jail free for returns
     ^ retGrp (code == [+Return-Instr], env == _ -> env = env)
     ^ jumpRegGrp (target == [-FPtrMem] -> fail "unauthorized fptr being used for indirect jump")
     ^ storeGrp (code == [FPtrStore], val == [-FPtrMem] -> fail "fptr store inst not storing a fptr value")

       //Case for all other instructions
       //TODO - Chris, wasn't sure how to write a "else allow exectuion" rule, does this work?
     ^ allGrp( env == _ -> env = env)

    main = cpiPol

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    init llvm.CPI.FPtrCreate                 {FPtrCreate}
    init llvm.CPI.FPtrStore                  {FPtrStore}
    init llvm.CFI_Return-Instr               {Return-Instr}
    
    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.IO.UART_0                       {}
    init SOC.Memory.Flash_0                  {}
    init SOC.Memory.Ram_0                    {}

    init SOC.IO.Debug                        {}
    init SOC.IO.TEST                         {}
    init SOC.IO.CLINT                        {}
    init SOC.IO.ITIM                         {}
    init SOC.IO.PLIC                         {}
   
    init Tools.Elf.Section.SHF_ALLOC         {}
    init Tools.Elf.Section.SHF_EXECINSTR     {}
    init Tools.Elf.Section.SHF_WRITE         {}
