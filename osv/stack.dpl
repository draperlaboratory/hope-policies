/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved.
 *
 * Use and disclosure subject to the following license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.stack:

import:
    osv.riscv

/*
 * Stack policy protects data stored in Frame regions created by function
 * prologue and epilogue code. User code can't overwrite Frame region, but
 * has read write access to other stack regions.
 */

metadata:
    Frame,
    Prologue,
    Epilogue,
    ClearAuthority

policy:

    stackPol =
      // Prologue and Epilog rules
      storeGrp (code == {Prologue}, env == {}, addr == {}, val == {}, mem == _ -> mem = {Frame}, env = env)
    ^ storeGrp (code == {Epilogue}, env == {}, addr == {}, val == {}, mem == _ -> mem = {}, env = env)

      // Authority for clearing swaths of stack (e.g. for longjmp)
    ^ storeGrp (code == {ClearAuthority}, env == {}, addr == {}, val == {}, mem == _ -> mem = {}, env = env)

      // Explicit violation for regular code to modify stack frame
    ^ storeGrp (code == {}, env == {}, addr == {}, val == {}, mem == {Frame} -> fail "Illegal stack access")
      // Allow regular stores to non-frame memory
    ^ storeGrp (code == {}, env == {}, addr == {}, val == {}, mem == {} -> mem = mem, env = env)
      // Strip Frame Tags on load to keep out of registers
    ^ loadGrp(code == _, env == {}, addr == {}, mem == _ -> env = env, res = {})
      // Other non-memory instructions allowed
    ^ loadGrp(code == _, env == _, addr == _, mem == _ -> fail "Illegal load")
    ^ storeGrp(code == _, env == _, addr == _, mem == _ -> fail "Illegal store")
    ^ allGrp(code == _, env == {} -> env = env)

require:

    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.CSR.Default               {}

    init entities.longjmp                    {ClearAuthority}
    init llvm.Prologue                       {Prologue}
    init llvm.Epilogue                       {Epilogue}

    init SOC.MMIO.UART_0                     {}
    init SOC.MEMORY.FLASH_0                  {}
    init SOC.MEMORY.RAM_0                    {}

    init SOC.MMIO.GEM0                       {}
    init SOC.MMIO.TEST                       {}
    init SOC.MMIO.CLINT                      {}
    init SOC.MMIO.ITIM                       {}
    init SOC.MMIO.PLIC                       {}
    init SOC.CBUS.PLIC                       {}
    init SOC.MMIO.GEM0                       {}
    init SOC.PBUS.MAILBOX                    {}
    init SOC.MMIO.MROM                       {}

    init elf.Section.SHF_ALLOC               {}
    init elf.Section.SHF_EXECINSTR           {}
    init elf.Section.SHF_WRITE               {}
