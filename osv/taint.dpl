
module osv.taint:

import:
  osv.riscv

metadata:
  Taint, // is data tainted
  Clean  // can tainted data be written here?

policy:
  taintPol = riscvPol

   // explicit failure for write tainted val to clean addr
   ^ storeGrp(   mem == [+Clean], addr == _, val == [+Taint], env == _
                 -> fail "Tainted data written to clean memory")

   // Propogate taint
   ^ arithGrp(env == _, op1 == [+Taint], op2 == _ -> env = env, res = op1)
   ^ arithGrp(env == _, op1 == _, op2 == [+Taint] -> env = env, res = op2)
   ^ mulDivRemGrp(code == _, env == _, op1 == [+Taint], op2 == _ -> env = env, res = op1)
   ^ mulDivRemGrp(code == _, env == _, op1 == _, op2 == [+Taint] -> env = env, res = op2)
   ^ immArithGrp(env == _, op1 == [+Taint] -> env = env, res = op1)
   ^ loadGrp(mem == [+Taint], addr == _, env == _ -> env = env, res = mem )
   ^ loadGrp(mem == _, addr == [+Taint], env == _ -> env = env, res = addr )
   ^ storeGrp(mem == _, addr == _, val == [+Taint], env == _ -> env = env, mem = val)
   ^ storeGrp(mem == [+Taint], addr == _, val == _, env == _ -> env = env, mem = mem ) 

   // keep clean mem stays clean always
   ^ storeGrp(   mem == [+Clean], addr == _, val == _, env == _ -> env = env, mem = mem)


   // default: allow other operations
   ^ branchGrp(code == _, env == _, op1 == _, op2 == _ -> env = env )
   ^ jumpRegGrp(code == _, env == _, target == _ -> env = env , return = {})
   ^ jumpGrp(code == _, env == _ -> return = {})
   ^ loadUpperGrp(code == _, env == _ -> env = env, dest = {})
   ^ immArithGrp(code == _, env == _, op1 == _ -> env = env, res = {})
   ^ arithGrp(code == _, env == _, op1 == _, op2 == _ -> env = env, res = {})
   ^ loadGrp(code == _, env == _, addr == _, mem == _ -> env = env, res = {})
   ^ storeGrp(code == _, env == _, addr == _, val == _, mem == _ -> env = env, mem = {})
   ^ mulDivRemGrp(code == _, env == _, op1 == _, op2 == _ -> env = env, res = {})
   ^ csrGrp(code == _, env == _, op1 == _, csr == _ -> env = env, csr = {}, res = {})
   ^ csriGrp(code == _, env == _, csr == _ -> env = env, csr = {}, res = {})
   ^ privGrp(code == _, env == _ -> env = env)
   ^ systemGrp(code == _, env == _ -> env = env)
   ^ floatGrp(code == _, env == _ -> env = env)
   ^ atomicGrp(code == _, env == _ -> env = env)

require:
    init ISA.RISCV.Reg.Env                   {}
    init ISA.RISCV.Reg.Default               {}
    init ISA.RISCV.Reg.RZero                 {}
    init ISA.RISCV.CSR.Default               {}
    init ISA.RISCV.CSR.MTVec                 {}

    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.MMIO.UART_0                       {Clean}
    init SOC.Memory.Flash_0                  {}
    init SOC.Memory.Ram_0                    {}

    init SOC.MMIO.TEST                         {}
    init SOC.MMIO.CLINT                        {}
    init SOC.MMIO.ITIM                         {}
    init SOC.MMIO.PLIC                         {}
    init SOC.CBUS.PLIC                         {}

    init poc.var.taint                       {Taint}
