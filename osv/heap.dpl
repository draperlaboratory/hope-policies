/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved.
 *
 * Use and disclosure subject to the following license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.heap:

import:
  osv.riscv

type:
  data Color = Int (20)

metadata:
  Cell Color,        // Color applied to memory cell
  Pointer Color,     // Color applied to a pointer value
  RawHeap,           // Unallocated heap memory
  ApplyColor,        // Function for applying colors
  RemoveColor,       // Function for removing colors
  NewColor,          // Special memory cell used with ApplyColor
  DelColor,          // Special memory cell used with RemoveColor
  ModColor,          // Special value used to modify heap cells
  KeepPointer        // When doing ptr arithmetic, keep ptr tag on result

policy:
  heapPol =
    // Handle generic non-pointer arithmetic
    arithGrp(code == _, env == {}, op1 == [-(Pointer _)], op2 == [-(Pointer _)] -> env = env, res = {})

    // TODO: delete once KeepPointer functionality is added
  ^ arithGrp(code == _, env == {}, op1 == {Pointer color}, op2 == [-(Pointer _)] -> env = env, res = op1)
  ^ arithGrp(code == _, env == {}, op1 == [-(Pointer _)], op2 == {(Pointer color)} -> env = env, res = op2)
    // pointer plus scalar retains pointer color iff LLVM static analysis says to
//   ^ arithGrp(code == {KeepPointer}, env == {}, op1 == {Pointer color}, op2 == {} -> env = env, res = op1)
//   ^ arithGrp(code == {KeepPointer}, env == {}, op1 == {}, op2 == {(Pointer color)} -> env = env, res = op2)
//   ^ arithGrp(code == {KeepPointer}, env == {}, op1 == {}, op2 == {} -> env = env, res = {})
//   ^ arithGrp(code == {}, env == {}, op1 == {Pointer color}, op2 == {} -> env = env, res = {})
//   ^ arithGrp(code == {}, env == {}, op1 == {}, op2 == {(Pointer color)} -> env = env, res = {})
    // Let the compiler mv the tagged data between registers
  ^ immArithGrp(code == {ApplyColor}, env == {}, op1 == {ModColor} -> env = env, res = op1)
  ^ immArithGrp(code == {RemoveColor}, env == {}, op1 == {ModColor} -> env = env, res = op1)
    // Allow arithmetic on same colored ptrs
  ^ arithGrp(code == _, env == {}, op1 == [+(Pointer color)], op2 == [+(Pointer color)] -> env = env, res = op1)
  ^ arithGrp(code == _, env == {}, op1 == [+(Pointer _)], op2 == [+(Pointer _)] -> fail "Can not combine different color Pointers")
  ^ immArithGrp(code == _, env == {}, op1 == [-(Pointer _)] -> env = env, res = {})
  ^ immArithGrp(code == _, env == {}, op1 == [+(Pointer color)] -> env = env, res = op1)

    // Apply and remove color from heap allocations
  ^ storeGrp(   code == {ApplyColor}, mem == [RawHeap], addr == [+(Pointer color)], val == {ModColor}, env == {}
              -> mem = {(Cell color)}, env = env )
  ^ storeGrp(   code == {RemoveColor}, mem == [+(Cell color)], addr == {(Pointer color)}, val == {ModColor}, env == {}
              -> mem = {RawHeap}, env = env)
    // Allow load and store to heap
  ^ loadGrp(    code == [-KeepPointer], mem == [+(Cell color)], addr == [+(Pointer color)], env == {}
             -> res = mem[-(Cell _)], env = env )
  ^ storeGrp(   code == [-KeepPointer], mem == [+(Cell color)], addr == [+(Pointer color)], val == _, env == {}
              -> mem = val[+(Cell color)], env = env )

    // Create new colors
  ^ storeGrp(   code == {ApplyColor}, mem == [+NewColor], env == {}
              -> mem = mem[(Pointer new)], env = env )
  ^ storeGrp(   code == {RemoveColor}, mem == [+DelColor], env == {}
              -> mem = mem, env = env )
  ^ loadGrp(   code == {ApplyColor}, mem == [+NewColor], env == {}
             -> res = mem[-NewColor], env = env )
  ^ loadGrp(   code == {RemoveColor}, mem == [+DelColor], env == {}
             -> res = {}, env = env )

    // Any other write to pallette needs to maintain its tags
  ^ storeGrp(   code == _, mem == [+NewColor], env == {}
              -> mem = mem, env = env )
  ^ storeGrp(   code == _, mem == [+DelColor], env == {}
              -> mem = mem, env = env )
  ^ storeGrp(   code == _, mem == [+ModColor], env == {}
              -> mem = mem, env = env )

    // Allow malloc to load store raw heap locations
  ^ loadGrp(   code == [-KeepPointer], mem == {RawHeap}, addr == [-(Pointer _)], env == {}
             -> res = {}, env = env )
  ^ storeGrp(   code == [-KeepPointer], mem == {RawHeap}, addr == [-(Pointer _)], val == _, env == {}
              -> mem = {RawHeap}, env = env )

    // Allow load and store to non-heap locations
  ^ loadGrp(   code == [-KeepPointer], mem == [-(Cell _)], addr == [-(Pointer _)], env == {}
             -> res = mem, env = env )
  ^ storeGrp(   code == [-KeepPointer], mem == [-(Cell _)], addr == [-(Pointer _)], val == _, env == {}
              -> mem = val, env = env )

    // non-memory operations are allowed, but must clear any dest registers
  ^ branchGrp(code == [-KeepPointer], env == {}, op1 == _, op2 == _ -> env = env )
  ^ jumpRegGrp(code == [-KeepPointer], env == {}, target == _ -> env = env , return = {})
  ^ jumpGrp(code == [-KeepPointer], env == {} -> return = {})
  ^ loadUpperGrp(code == [-KeepPointer], env == {} -> env = env, dest = {})
  ^ immArithGrp(code == [-KeepPointer], env == {}, op1 == _ -> env = env, res = {})
  ^ arithGrp(code == [-KeepPointer], env == {}, op1 == _, op2 == _ -> env = env, res = {})
  ^ csrGrp(code == [-KeepPointer], env == {}, op1 == _, csr == _ -> env = env, csr = {}, res = {})
  ^ csriGrp(code == [-KeepPointer], env == {}, csr == _ -> env = env, csr = {}, res = {})
  ^ floatGrp(code == [-KeepPointer], env == {} -> env = env)
  ^ privGrp(code == [-KeepPointer], env == {} -> env = env)

require:
    init ISA.RISCV.Reg.Env                           {}
    init ISA.RISCV.Reg.Default                       {}
    init ISA.RISCV.CSR.Default                       {}

    // TODO: LLVM doesn't do this yet, nor do the tagging tools handle it.
    // And it could probably use a better name
    init llvm.PtrArith_ResPointer                    {KeepPointer}

    init SOC.MMIO.UART_0                             {}
    init SOC.MEMORY.FLASH_0                          {}
    init SOC.MEMORY.RAM_0                            {}

    init SOC.MMIO.TEST                               {}
    init SOC.MMIO.MROM                               {}
    init SOC.MMIO.CLINT                              {}
    init SOC.MMIO.ITIM                               {}
    init SOC.MMIO.PLIC                               {}
    init SOC.CBUS.PLIC                               {}
    init SOC.MMIO.GEM0                               {}
    init SOC.MMIO.I2C_0                              {}
    init SOC.MMIO.GPIO_0                             {}
    init SOC.MMIO.GPIO_1                             {}
    init SOC.MMIO.Ethernet_0                         {}
    init SOC.PBUS.MAILBOX                            {}

    init SOC.Memory.BRAM_CTRL_0                      {}
    init SOC.Memory.DMA_0                            {}
    init SOC.Memory.QSPI_1                           {}

    init entities.ApplyTag.ucHeap                    {RawHeap}
    init entities.ApplyTag.dover_ptr_zero            {ModColor}

    init entities.ApplyTag.pvPortMalloc              {}
    init entities.ApplyTag.dover_tag                 {ApplyColor}
    init entities.ApplyTag.dover_untag               {RemoveColor}
    init entities.ApplyTag.dover_remove_tag          {RemoveColor}
    init entities.ApplyTag.dover_ptr_tag             {NewColor}
    init entities.ApplyTag.dover_ptr_untag           {DelColor}

    init elf.Section.SHF_ALLOC               {}
    init elf.Section.SHF_EXECINSTR           {}
    init elf.Section.SHF_WRITE               {}
