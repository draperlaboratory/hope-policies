/*
 * Copyright Â© 2017-2018 The Charles Stark Draper Laboratory, Inc. and/or Dover Microsystems, Inc.
 * All rights reserved.
 *
 * Use and disclosure subject to the following license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module osv.testComplex:

/*
 * The Complex Test policy provides very little security in a complicated
 * way.  It is intended to stress test policy compilation, system tag
 * initialization, and policy execution.
 *
 * It does enforce marginally more security than the "none" policy in that
 * it requires all instructions to be tagged with opgroups.  It will
 * therefore prevent attacks that write code and attempt to execute it.
 * This is the minimum level of security it is possible to provide
 * without use of the __NO_CHECKS escape hatch.
 */

import:
    osv.riscv

metadata:
    AllowCode,
    AllowReg,
    AllowMem,
    AllowRom,
    AllowEnv,
    AllowCSR,
    AllowIO

policy:           // Allow most ops involving regular registers, memory & csrs
  testComplexPol =
     arithGrp(code == [AllowCode], env == [AllowEnv], op1 == [AllowReg], op2 == [AllowReg] -> env = {AllowEnv}, res = {AllowReg})
   ^ immArithGrp(code == [AllowCode], env == [AllowEnv], op1 == [AllowReg] -> env = {AllowEnv}, res = {AllowReg})
   ^ mulDivRemGrp(code == [AllowCode], env == [AllowEnv], op1 == [AllowReg], op2 == [AllowReg] -> env = {AllowEnv}, res = {AllowReg})
   ^ branchGrp(code == [AllowCode], env == [AllowEnv], op1 == [AllowReg], op2 == [AllowReg] -> env = {AllowEnv})
   ^ jumpRegGrp(code == [AllowCode], env == [AllowEnv], target == [AllowReg] -> env = {AllowEnv}, return = {AllowReg})
   ^ jumpGrp(code == [AllowCode], env == [AllowEnv] -> env = {AllowEnv}, return = {AllowReg})
     // Allow load store to memory
   ^ loadGrp(   code == [AllowCode],  mem == [AllowMem], addr == [AllowReg], env == [AllowEnv]
             -> res = {AllowReg}, env = {AllowEnv} )
   ^ storeGrp(  code == [AllowCode],  mem == [AllowMem], addr == [AllowReg], val == [AllowReg], env == [AllowEnv]
              -> mem = {AllowMem}, env = {AllowEnv} )
     // Allow load store to IO
   ^ loadGrp(   code == [AllowCode],  mem == [AllowIO], addr == [AllowReg], env == [AllowEnv]
             -> res = {AllowReg}, env = {AllowEnv} )
   ^ storeGrp(  code == [AllowCode],  mem == [AllowIO], addr == [AllowReg], val == [AllowReg], env == [AllowEnv]
              -> mem = {AllowIO}, env = {AllowEnv} )
   ^ loadUpperGrp(code == [AllowCode], env == [AllowEnv] -> env = {AllowEnv}, dest = {AllowReg})
   ^ csrGrp(code == [AllowCode], env == [AllowEnv], op1 == [AllowReg], csr == [AllowCSR] -> csr = {AllowCSR}, res = {AllowReg}, env = {AllowEnv} )
   // special case for MTVec CSR
   ^ csrGrp(code == [AllowCode], env == [AllowEnv], op1 == [AllowReg], csr == [AllowEnv] -> csr = {AllowEnv}, res = {AllowReg}, env = {AllowEnv} )
   ^ csriGrp(code == [AllowCode], env == [AllowEnv], csr == [AllowCSR] -> csr = {AllowCSR}, res = {AllowReg}, env = {AllowEnv} )
     // Change privledge mode
   ^ privGrp(code == [AllowCode], env == [AllowEnv] -> env = {AllowEnv})


require:
    init ISA.RISCV.Reg.Env                   {AllowEnv}
    init ISA.RISCV.Reg.Default               {AllowReg}
    init ISA.RISCV.Reg.RZero                 {AllowReg}
    init ISA.RISCV.CSR.Default               {AllowCSR}
    init ISA.RISCV.CSR.MTVec                 {AllowCSR}

    init Tools.Link.MemoryMap.Default        {}
    init Tools.Link.MemoryMap.UserHeap       {}
    init Tools.Link.MemoryMap.UserStack      {}

    init SOC.MMIO.UART_0                       {AllowIO}
    init SOC.MEMORY.FLASH_0                  {AllowRom}
    init SOC.MEMORY.RAM_0                    {AllowMem}

    init SOC.MMIO.TEST                         {AllowMem}

    init Tools.Elf.Section.SHF_ALLOC         {AllowMem}
    init Tools.Elf.Section.SHF_EXECINSTR     {AllowCode}
    init Tools.Elf.Section.SHF_WRITE         {AllowMem}

